embedding_size = 64

class GCN(torch.nn.Module):
    def __init__(self):
        # Init parent
        super(GCN, self).__init__()
        torch.manual_seed(42)

        # GCN layers
        self.initial_conv = GCNConv(5, 100)
        self.conv1 = GCNConv(100, 100)
        self.conv2 = GCNConv(100, 100)
        self.conv3 = GCNConv(100, 100)

        # Output layer
        self.out = Linear(100, 1)

    def forward(self, x, edge_index, edge_type):
        # First Conv layer
        hidden = self.initial_conv(x, edge_index, edge_type)
        hidden = F.relu(hidden)

        # Other Conv layers
        hidden = self.conv1(hidden, edge_index, edge_type)
        hidden = F.relu(hidden)
        hidden = self.conv2(hidden, edge_index, edge_type)
        hidden = F.relu(hidden)
        hidden = self.conv3(hidden, edge_index, edge_type)
        hidden = F.relu(hidden)

        # Apply a final (linear) classifier.
        out = self.out(hidden)

        return out

model = GCN()
print(model)
print("Number of parameters: ", sum(p.numel() for p in model.parameters()))
